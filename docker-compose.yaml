version: '3.9'

volumes:
    prometheus_data: {}
    grafana_data: {}
    mongo_data: {}
    s3_data: {}
    mlflow_db_data: {}

# networks:
#   front-tier:
#   back-tier:

# networks:
#   frontend:
#     driver: bridge
#   backend:
#     driver: bridge

 
services:
  # sqlite:
  #   image: nouchka/sqlite3:latest
  #   volumes:
  #     - mlflow_data/:/root/db/
  db:
    image: postgres:14.3
    container_name: mlflow_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    expose:
      - "5432"
    ports:
      - "5432:5432"
    volumes:
      - "mlflow_db_data:/var/lib/postgresql/"
    # networks:
    #   - backend

  minio:
    image: minio/minio:RELEASE.2022-10-24T18-35-07Z
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_SITE_REGION: ${AWS_DEFAULT_REGION}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    expose:
      - "9000"
      - "9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - "s3_data:/data"
    # networks:
    #   - backend
    #   - frontend

  create_bucket:
    image: minio/mc
    container_name: create_bucket
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      echo sleep 15;
      sleep 15;
      /usr/bin/mc config host add myminio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      /usr/bin/mc mb myminio/${EXPERIMENT_NAME};
      exit 0;
      "

  mlflow_server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mlflow_server
    environment:
      AWS_REGION: ${AWS_REGION}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_ENDPOINT_URL: ${AWS_S3_ENDPOINT_URL}
    expose:
      - "5000"
    ports:
      - "5000:5000"
    # env_file:
    #   - .env
    command: >
      mlflow server 
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB} 
      --host 0.0.0.0
      --default-artifact-root s3://${EXPERIMENT_NAME}/mlflow
      --serve-artifacts
    depends_on:
      - db
      - minio
    # networks:
    #   - backend
    #   - frontend

  # prediction_service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - evidently_service
  #     - mongo
  #   environment:
  #     EVIDENTLY_SERVICE: "http://evidently_service:8085"
  #     MONGODB_ADDRESS: "mongodb://mongo:27017/"
  #     MLFLOW_TRACKING_URI: "http://host.docker.iternal:5000"
  #     MLFLOW_ENABLED: "False"
  #     MODEL_LOCATION: "/app/model"
  #     PICKLE_PATH: "pickle"
  #     EXPERIMENT_NAME: ${EXPERIMENT_NAME}
  #     PORT: "9696"
  #     TEST: "False"
  #   command: "gunicorn --bind=0.0.0.0:9696 predict:app"
  #   volumes:
  #     - ./model:/app/model
  #   expose:
  #     - "9696"
  #   ports:
  #     - "9696:9696"
  #   # networks:
  #   #   - backend
  #   #   - frontend
  
  prefect:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: prefect
    environment:
      EXPERIMENT_NAME: ${EXPERIMENT_NAME}
      AWS_REGION: ${AWS_REGION}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_ENDPOINT_URL: ${AWS_S3_ENDPOINT_URL}
      MLFLOW_TRACKING_URI: http://mlflow_server:5000
      PREFECT_API_URL: http://127.0.0.1:4200/api
      PREFECT_SERVER_API_HOST: "0.0.0.0"
    command: "prefect server start"
    volumes:
      - ./data:/app/data
      - ./model:/app/model
    expose:
      - "4200"
    ports:
      - "4200:4200"
    depends_on:
      - mlflow_server
    # networks:
    #   - backend
    #   - frontend
    restart: on-failure

  evidently_service:
    build:
      context: monitoring
      dockerfile: Dockerfile
    depends_on:
      - grafana
    volumes:
      - ./ref_data:/app/datasets
      - ./monitoring/config.yaml:/app/config.yaml
    ports:
      - "8085:8085"
    # networks:
    #   - backend
    #   - frontend
  
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    environment:
      AWS_REGION: ${AWS_REGION}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_ENDPOINT_URL: ${AWS_S3_ENDPOINT_URL}
      MLFLOW_ENABLED: "True"
      MLFLOW_TRACKING_URI: http://mlflow_server:5000
      EVIDENTLY_SERVICE: http://evidently_service:8085
      MONGODB_URI: "mongodb://mongo:27017"
      EXPERIMENT_NAME: ${EXPERIMENT_NAME}
      MODEL_LOCATION: "/app/model"
      PORT: "9696"
      TEST: "False"
    command: "gunicorn --bind=0.0.0.0:9696 predict:app"
    volumes:
      - ./data:/app/data
      - ./model:/app/model
    expose:
      - "9696"
    ports:
      - "9696:9696"
    depends_on:
      - mlflow_server
      - evidently_service
      - mongo
    # networks:
    #   - backend
    #   - frontend
    restart: on-failure

  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    # networks:
    #   - backend
    restart: always

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/config/grafana_datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
      - ./monitoring/config/grafana_dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./monitoring/dashboards:/opt/grafana/dashboards
      - grafana_data:/var/lib/grafana
    # networks:
    #   - backend
    #   - frontend
    restart: always

  mongo:
    image: mongo
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
    # networks:
    #   - backend
    #   - frontend